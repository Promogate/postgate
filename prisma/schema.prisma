// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserApiLimit {
  id           String   @id @default(uuid())
  userId       String   @unique
  count        Int      @default(0)
  accountLevel String?  @default("FREE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Redirector {
  id               String  @id @default(uuid())
  title            String
  description      String?
  userId           String?
  groups           Group[]
  redirectorLink   String?
  timesClicked     Int     @default(0)
  type             String  @default("sequential")
  currentGroup     Int     @default(0)
  redirectorStatus String  @default("started")
}

model Group {
  id              String  @id @default(uuid())
  title           String?
  destinationLink String
  members         Int
  limit           Int     @default(1024)

  redirector   Redirector @relation(fields: [redirectorId], references: [id], onDelete: Cascade)
  redirectorId String
}

model WhatstappSession {
  id            String   @id @default(uuid())
  hash          String?  @unique
  userId        String?
  ownerJid      String?
  profilePicUrl String?
  instanceName  String?
  description   String?
  instance      String   @unique
  isConnected   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Workflow {
  id           String  @id @default(uuid())
  title        String
  description  String?
  isPublished  Boolean @default(false)
  scheduleDate String?
  userId       String
  nodes        String?
  edges        String?
}

model WhatsappChat {
  id                  String   @id @default(uuid())
  remoteJid           String   @unique
  instanceId          String
  subject             String?
  description         String?
  isRestrict          Boolean?
  isCommunity         Boolean?
  isCommunityAnnounce Boolean?
  owner               String?
  isRaw               Boolean? @default(true)
}

model SendingList {
  id            String  @id @default(uuid())
  userId        String
  name          String?
  instanceId    String?
  list          String?
  groupsInfo    String?
}
